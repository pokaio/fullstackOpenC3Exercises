{"version":3,"sources":["components/Note.js","services/notes.js","AppEx.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","baseUrl","services_notes","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","AppEx_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","AppEx_Footer","ReactDOM","createRoot","document","getElementById","render","AppEx"],"mappings":"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","file":"static/js/main.c0d1ceeb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = 'https://radiant-island-42047.herokuapp.com/api/notes'\r\n\r\n//Retrieve data from server NEW\r\n/* const getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n} */\r\n\r\n\r\n\r\n//Promises and Errors\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: \"This note is not saved to server\",\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\n\r\n\r\n//Returns renspose.data OLD\r\n/* const getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n} */\r\n\r\n//Send data to server\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Update data on server\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update\r\n}\r\n","import React from 'react'\r\nimport Note from './components/Note.js'\r\nimport { useState, useEffect } from 'react'\r\n//import axios from 'axios'\r\nimport noteService from './services/notes'\r\n\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return(\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    //Accessing users input in the form\r\n    const [newNote, setNewNote] = useState()\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState('some error happened...')\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n            id: notes.length + 1,\r\n        }\r\n\r\n        /* axios\r\n            .post('http://localhost:3001/notes', noteObject)\r\n            .then(response => {\r\n                setNotes(notes.concat(response.data))\r\n                setNewNote('')\r\n            }) */\r\n\r\n\r\n        //Updated\r\n        /* noteService\r\n            .create(noteObject)\r\n            .then(response => {\r\n                setNotes(notes.concat(response.data))\r\n                setNewNote('')\r\n            }) */\r\n\r\n        //Refactored above\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n    }\r\n\r\n    //OLD\r\n    /* useEffect(() => {\r\n        console.log('effect')\r\n        axios\r\n            .get('http://localhost:3001/notes')\r\n            .then(response => {\r\n                console.log('promise fulfilled')\r\n                setNotes(response.data)\r\n            })\r\n    }, []) */\r\n\r\n    //Uptdated\r\n    /* useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then(response => {\r\n                setNotes(response.data)\r\n            })\r\n    }, []) */\r\n\r\n    //Refactored above\r\n    useEffect(() => {\r\n        console.log(noteService.getAll)\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n    }, [])\r\n\r\n\r\n    //A list of notes to be displayed\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important === true)\r\n\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const toggleImportance = (id) => {\r\n        //const url = `http://localhost:3001/notes/${id}`\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n\r\n        //OLD\r\n        /* axios\r\n            .put(url, changedNote)\r\n            .then(response => {\r\n                setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n            }) */\r\n\r\n        //Updated\r\n        /* noteService\r\n            .update(id, changedNote)\r\n            .then(response => {\r\n                setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n            }) */\r\n\r\n        //Refactored above\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            })\r\n            //OLD\r\n            /* .catch(error => {\r\n                alert(\r\n                    `the note '${note.content}' was already deleted from server`\r\n                )\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            }) */\r\n            //NEW part 2.d\r\n            .catch(error => {\r\n                setErrorMessage(\r\n                    `Note '${note.content} was already removed from server` \r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? 'important' : 'all'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map(note =>\r\n                    <Note\r\n                        key={note.id}\r\n                        note={note}\r\n                        toggleImportance={() => toggleImportance(note.id)}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input\r\n                    value={newNote}\r\n                    onChange={handleNoteChange}\r\n                />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\n\r\nimport './index.css'\r\n\r\nimport App from './AppEx'\r\n\r\n\r\n\r\nReactDOM.createRoot(document.getElementById('root')).render(\r\n  <App />\r\n)"],"sourceRoot":""}